#include "StateMachineLib.h"
#include <AsyncTaskLib.h>

// State Alias
enum State
{
    Inicio = 0,
    Monitoreo_th = 1,
    Alerta = 2,
    Monitoreo_luz = 3,
    Alarma = 4
};

// Input Alias
enum Input
{
    H = 0,
    A = 1,
    L = 2,
    B = 3,
    Sign_Timeout = 4,   // Señal de timeout
    Unknown = 5
};

// Create new StateMachine
StateMachine stateMachine(5, 9);

// Stores last user input
Input input = Input::Unknown;

// Tareas de timeout
AsyncTask timeoutInicio(5000, false, []() { input = Input::Sign_Timeout; });
AsyncTask timeoutMonThToLuz(7000, false, []() { input = Input::Sign_Timeout; });
AsyncTask timeoutAlertaToMonTh(4000, false, []() { input = Input::Sign_Timeout; });
AsyncTask timeoutMonLuzToTh(2000, false, []() { input = Input::Sign_Timeout; });
AsyncTask timeoutAlarmaToLuz(5000, false, []() { input = Input::Sign_Timeout; });

// Configuración de timeouts
void setTimeout(AsyncTask& task, unsigned long interval) {
    task.SetIntervalMillis(interval);
    task.Reset();
}

// Setup the State Machine
void setupStateMachine()
{
    // Transiciones
    // Inicio -> Monitoreo_th (por timeout)
    stateMachine.AddTransition(Inicio, Monitoreo_th, []() { 
        return input == Input::Sign_Timeout; 
    });
    
    // Monitoreo_th -> Monitoreo_luz (por timeout)
    stateMachine.AddTransition(Monitoreo_th, Monitoreo_luz, []() { 
        return input == Input::Sign_Timeout; 
    });
    
    // Monitoreo_th -> Alerta (por tecla H)
    stateMachine.AddTransition(Monitoreo_th, Alerta, []() { 
        return input == Input::H; 
    });
    
    // Alerta -> Monitoreo_th (por timeout)
    stateMachine.AddTransition(Alerta, Monitoreo_th, []() { 
        return input == Input::Sign_Timeout; 
    });
    
    // Alerta -> Inicio (por tecla A)
    stateMachine.AddTransition(Alerta, Inicio, []() { 
        return input == Input::A; 
    });
    
    // Monitoreo_luz -> Monitoreo_th (por timeout)
    stateMachine.AddTransition(Monitoreo_luz, Monitoreo_th, []() { 
        return input == Input::Sign_Timeout; 
    });
    
    // Monitoreo_luz -> Alarma (por tecla L)
    stateMachine.AddTransition(Monitoreo_luz, Alarma, []() { 
        return input == Input::L; 
    });
    
    // Alarma -> Monitoreo_luz (por timeout)
    stateMachine.AddTransition(Alarma, Monitoreo_luz, []() { 
        return input == Input::Sign_Timeout; 
    });
    
    // Alarma -> Inicio (por tecla B)
    stateMachine.AddTransition(Alarma, Inicio, []() { 
        return input == Input::B; 
    });

    // Acciones de entrada a estados
    stateMachine.SetOnEntering(Inicio, []() {
        outputInicio();
        setTimeout(timeoutInicio, 5000); // Configura timeout 5s
    });
    
    stateMachine.SetOnEntering(Monitoreo_th, []() {
        outputMonitoreo_th();
        setTimeout(timeoutMonThToLuz, 7000); // Configura timeout 7s
    });
    
    stateMachine.SetOnEntering(Alerta, []() {
        outputAlerta();
        setTimeout(timeoutAlertaToMonTh, 4000); // Configura timeout 4s
    });
    
    stateMachine.SetOnEntering(Monitoreo_luz, []() {
        outputMonitoreo_luz();
        setTimeout(timeoutMonLuzToTh, 2000); // Configura timeout 2s
    });
    
    stateMachine.SetOnEntering(Alarma, []() {
        outputAlarma();
        setTimeout(timeoutAlarmaToLuz, 5000); // Configura timeout 5s
    });

    // Acciones de salida de estados
    stateMachine.SetOnLeaving(Inicio, []() { 
        Serial.println("Saliendo de Inicio"); 
        input = Input::Unknown;  // Resetear la señal
        timeoutInicio.Stop();
    });
    
    stateMachine.SetOnLeaving(Monitoreo_th, []() { 
        Serial.println("Saliendo de Monitoreo_th"); 
        input = Input::Unknown;  // Resetear la señal
        timeoutMonThToLuz.Stop();
    });
    
    stateMachine.SetOnLeaving(Alerta, []() { 
        Serial.println("Saliendo de Alerta"); 
        input = Input::Unknown;  // Resetear la señal
        timeoutAlertaToMonTh.Stop();
    });
    
    stateMachine.SetOnLeaving(Monitoreo_luz, []() { 
        Serial.println("Saliendo de Monitoreo_luz"); 
        input = Input::Unknown;  // Resetear la señal
        timeoutMonLuzToTh.Stop();
    });
    
    stateMachine.SetOnLeaving(Alarma, []() { 
        Serial.println("Saliendo de Alarma"); 
        input = Input::Unknown;  // Resetear la señal
        timeoutAlarmaToLuz.Stop();
    });
}

void setup() 
{
    Serial.begin(9600);
    Serial.println("Iniciando Maquina de Estados...");
    setupStateMachine();    
    Serial.println("Maquina de Estados Iniciada");

    // Estado inicial
    stateMachine.SetState(Inicio, false, true);
}

void loop() 
{
    // Actualizar todas las tareas de timeout
    timeoutInicio.Update();
    timeoutMonThToLuz.Update();
    timeoutAlertaToMonTh.Update();
    timeoutMonLuzToTh.Update();
    timeoutAlarmaToLuz.Update();

    // Leer entrada del usuario (solo si no hay señal activa)
    if(input == Input::Unknown) {
        input = static_cast<Input>(readInput());
    }

    // Actualizar maquina de estados
    stateMachine.Update();
}

// Función para leer entradas
int readInput()
{
    if (Serial.available())
    {
        char c = Serial.read();
        switch(c)
        {
            case 'H': return Input::H;
            case 'A': return Input::A;
            case 'L': return Input::L;
            case 'B': return Input::B;
        }
    }
    return Input::Unknown;
}

// Funciones de salida
void outputInicio() {
    Serial.println("\n--- ESTADO: Inicio ---");
    Serial.println("Transicion automatica a Monitoreo_th en 5s");
}

void outputMonitoreo_th() {
    Serial.println("\n--- ESTADO: Monitoreo_th ---");
    Serial.println("Transiciones:");
    Serial.println("  Automatico (7s) -> Monitoreo_luz");
    Serial.println("  Tecla 'H'       -> Alerta");
}

void outputAlerta() {
    Serial.println("\n--- ESTADO: Alerta ---");
    Serial.println("Transiciones:");
    Serial.println("  Automatico (4s) -> Monitoreo_th");
    Serial.println("  Tecla 'A'       -> Inicio");
}

void outputMonitoreo_luz() {
    Serial.println("\n--- ESTADO: Monitoreo_luz ---");
    Serial.println("Transiciones:");
    Serial.println("  Automatico (2s) -> Monitoreo_th");
    Serial.println("  Tecla 'L'       -> Alarma");
}

void outputAlarma() {
    Serial.println("\n--- ESTADO: Alarma ---");
    Serial.println("Transiciones:");
    Serial.println("  Automatico (5s) -> Monitoreo_luz");
    Serial.println("  Tecla 'B'       -> Inicio");
}
